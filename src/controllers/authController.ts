// src/controllers/authController.ts

import { Request, Response } from 'express';
import { v4 as uuidv4 } from 'uuid';//f47ac10b-58cc-4372-a567-0e02b2c3d479 32 hexadecimal characters ( 128 bits)
import { RequestOtpData, RequestOtpResponse, ValidateOtpData, UserDetails } from '../interfaces/authInterfaces';
import { otpStore } from '../utils/otpStore';
import { validationResult } from 'express-validator';

// function to generate OTP
const generateOtp = (length: number = 4): string => {
  const digits = '0123456789';
  let otp = '';
  for (let i = 0; i < length; i++) {
    otp += digits[Math.floor(Math.random() * 10)];
  }
  //Generate a randome number 
  return otp;
};


export const requestOtp = (req: Request, res: Response): void => {
    //validationResult(req)-> examines the request object to check if any validations performed by middleware have failed and checking for any errors generated by validation rules applied to the request body, query parameters, or URL parameters.
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    res.status(400).json({ errors: errors.array() });
    return;
  }

  const { mobileNumber, deviceId } = req.body as RequestOtpData;

  // Generate OTP and hash
  const otp = generateOtp(6); // 6 digits random otp
  const hash = uuidv4(); //hash generation

  // user details
  const userDetails: UserDetails = {
    userId: uuidv4(),
    mobileNumber,
    deviceId,
    createdAt: new Date(),  //Date for creation
  };

  // Store OTP with hash in hashmap for validation in validation request
  otpStore.add(hash, otp, userDetails);


  console.log(`OTP for ${mobileNumber}: ${otp}`); // we can use this otp for validation

  const response: RequestOtpResponse = { hash };// return hash as an output
  res.status(200).json(response);
};

export const validateOtp = (req: Request, res: Response): void => {
  const { otp, hash } = req.body as ValidateOtpData; //Take the requestparam and store it into otp and hash

  if (!otp ) {//if Otp is null
    res.status(400).json({ message: 'otp is required.' });
    return;
  }
  if(!hash){ //if hash is null
    res.status(400).json({ message: 'hash is required.' });
    return;
  }

  const entry = otpStore.get(hash);// get the entry from the map with the help of hash

  if (!entry) { //if entry is null
    res.status(400).json({ message: 'Invalid or expired hash.' });
    return;
  }

  if (entry.otp !== otp) {// if the otp enter is not equal to the otp present in map then give invalid otp error
    res.status(400).json({ message: 'Invalid OTP.' });
    return;
  }

  otpStore.delete(hash);// Remove the hash from the map to ensure overflow of memory
  res.status(200).json(entry.userDetails);
};
